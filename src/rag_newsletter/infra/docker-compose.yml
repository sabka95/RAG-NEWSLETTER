# Docker Compose optimisé pour Apple Silicon M4
version: '3.8'

services:
  rag-app:
    build:
      context: ../../
      dockerfile: src/rag_newsletter/infra/Dockerfile
    container_name: rag-newsletter-app
    env_file:
      - ../../.env
    ports:
      - "8501:8501"   # Streamlit (quand implémenté)
      - "8000:8000"   # API (quand implémenté)
    volumes:
      - ../../downloads:/app/downloads
      - ../../logs:/app/logs
      - qdrant_data:/qdrant/storage
    depends_on:
      - qdrant
    environment:
      - MLX_ENABLE_GPU=1
      - MLX_DEVICE=mps
      - PYTHONPATH=/app/src
    command: ["poetry", "run", "python", "-m", "rag_newsletter", "--help"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: rag-newsletter-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"  # gRPC
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__SERVICE__ENABLE_CORS=true
      - QDRANT__STORAGE__PERFORMANCE__MAX_SEARCH_REQUESTS=100
      - QDRANT__STORAGE__PERFORMANCE__MAX_OPTIMIZATION_THREADS=4
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Service optionnel pour le monitoring
  qdrant-dashboard:
    image: qdrant/qdrant-dashboard:latest
    container_name: rag-newsletter-dashboard
    ports:
      - "8080:8080"
    environment:
      - QDRANT_URL=http://qdrant:6333
    depends_on:
      - qdrant
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  qdrant_data:
    driver: local

networks:
  default:
    name: rag-newsletter-network