#!/usr/bin/env python3
"""
Script de d√©marrage rapide pour tester les optimisations RAG
Utilisation: python quick_start.py
"""

import os
import sys
import subprocess
from pathlib import Path

def check_dependencies():
    """V√©rifie les d√©pendances n√©cessaires"""
    print("üîç V√©rification des d√©pendances...")
    
    # V√©rifier Python
    if sys.version_info < (3, 11):
        print("‚ùå Python 3.11+ requis")
        return False
    
    print(f"‚úÖ Python {sys.version}")
    
    # V√©rifier Poetry
    try:
        result = subprocess.run(["poetry", "--version"], capture_output=True, text=True)
        print(f"‚úÖ Poetry {result.stdout.strip()}")
    except FileNotFoundError:
        print("‚ùå Poetry non install√©")
        return False
    
    # V√©rifier Docker
    try:
        result = subprocess.run(["docker", "--version"], capture_output=True, text=True)
        print(f"‚úÖ Docker {result.stdout.split()[2]}")
    except FileNotFoundError:
        print("‚ùå Docker non install√©")
        return False
    
    return True

def setup_environment():
    """Configure l'environnement"""
    print("\nüîß Configuration de l'environnement...")
    
    # Cr√©er le fichier .env s'il n'existe pas
    env_file = Path(".env")
    if not env_file.exists():
        env_example = Path("env.example")
        if env_example.exists():
            print("üìù Cr√©ation du fichier .env √† partir de env.example")
            env_file.write_text(env_example.read_text())
        else:
            print("‚ö†Ô∏è  Fichier .env manquant, veuillez le cr√©er manuellement")
    
    # Installer les d√©pendances
    print("üì¶ Installation des d√©pendances...")
    try:
        subprocess.run(["poetry", "install"], check=True)
        print("‚úÖ D√©pendances install√©es")
    except subprocess.CalledProcessError:
        print("‚ùå Erreur lors de l'installation des d√©pendances")
        return False
    
    return True

def start_qdrant():
    """D√©marre Qdrant"""
    print("\nüöÄ D√©marrage de Qdrant...")
    
    try:
        # V√©rifier si Qdrant est d√©j√† en cours d'ex√©cution
        result = subprocess.run(
            ["curl", "-s", "http://localhost:6333/health"],
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            print("‚úÖ Qdrant d√©j√† en cours d'ex√©cution")
            return True
        
        # D√©marrer Qdrant avec Docker Compose
        print("üê≥ D√©marrage de Qdrant avec Docker Compose...")
        subprocess.run([
            "docker-compose", "-f", "src/rag_newsletter/infra/docker-compose.yml", 
            "up", "-d", "qdrant"
        ], check=True)
        
        print("‚úÖ Qdrant d√©marr√©")
        return True
        
    except subprocess.CalledProcessError:
        print("‚ùå Erreur lors du d√©marrage de Qdrant")
        return False
    except FileNotFoundError:
        print("‚ùå Docker Compose non trouv√©")
        return False

def test_basic_functionality():
    """Test des fonctionnalit√©s de base"""
    print("\nüß™ Test des fonctionnalit√©s de base...")
    
    try:
        # Test de la configuration
        print("üîß Test de la configuration...")
        result = subprocess.run([
            "python", "-m", "rag_newsletter", "--help"
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Module RAG fonctionnel")
        else:
            print("‚ùå Erreur dans le module RAG")
            return False
        
        # Test des optimisations
        print("üöÄ Test des optimisations...")
        result = subprocess.run([
            "python", "-m", "rag_newsletter", "--search", "test", "--no-mlx"
        ], capture_output=True, text=True)
        
        print("‚úÖ Test des optimisations termin√©")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        return False

def run_example():
    """Lance un exemple complet"""
    print("\nüìö Exemple d'utilisation...")
    
    # Exemple avec les optimisations
    print("üéØ Exemple avec optimisations M4:")
    print("python -m rag_newsletter --search 'sustainability goals' --mmr-lambda 0.7")
    print("\nüîç Exemple avec recherche filtr√©e:")
    print("python -m rag_newsletter --search 'climate change' --no-mmr")
    print("\nüìä Test des performances:")
    print("python examples/test_optimizations.py")

def main():
    """Fonction principale"""
    print("üöÄ D√©marrage rapide RAG Newsletter avec optimisations Apple Silicon")
    print("=" * 70)
    
    # V√©rifier les d√©pendances
    if not check_dependencies():
        print("\n‚ùå D√©pendances manquantes. Veuillez les installer avant de continuer.")
        return 1
    
    # Configurer l'environnement
    if not setup_environment():
        print("\n‚ùå Erreur lors de la configuration de l'environnement.")
        return 1
    
    # D√©marrer Qdrant
    if not start_qdrant():
        print("\n‚ùå Erreur lors du d√©marrage de Qdrant.")
        return 1
    
    # Tester les fonctionnalit√©s
    if not test_basic_functionality():
        print("\n‚ùå Erreur lors du test des fonctionnalit√©s.")
        return 1
    
    # Afficher les exemples
    run_example()
    
    print("\n‚úÖ D√©marrage rapide termin√© avec succ√®s!")
    print("\nüìñ Prochaines √©tapes:")
    print("1. Configurez vos identifiants Azure dans le fichier .env")
    print("2. T√©l√©chargez des documents: python -m rag_newsletter --download")
    print("3. Ing√©rez les documents: python -m rag_newsletter --ingest")
    print("4. Testez la recherche: python -m rag_newsletter --search 'votre requ√™te'")
    print("5. Lancez les tests de performance: python examples/test_optimizations.py")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
